const axios = require('axios');

// Test the AI tutor API with step-by-step conversation
async function testAITutorAPI() {
  const baseURL = 'http://localhost:3000/api/ai-tutor';
  let conversationState = null;

  console.log('üß™ Testing AI Tutor API Step-by-Step Conversation\n');

  // Test 1: Language selection
  console.log('üìù Test 1: Language Selection');
  try {
    const response1 = await axios.post(baseURL, {
      message: 'English',
      conversationState: conversationState
    });
    console.log('‚úÖ Response:', response1.data.response);
    conversationState = response1.data.conversationState;
    console.log('üîÑ State:', conversationState);
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    return;
  }

  // Test 2: Subject selection
  console.log('\nüìù Test 2: Subject Selection');
  try {
    const response2 = await axios.post(baseURL, {
      message: 'I need help with math',
      conversationState: conversationState
    });
    console.log('‚úÖ Response:', response2.data.response);
    conversationState = response2.data.conversationState;
    console.log('üîÑ State:', conversationState);
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    return;
  }

  // Test 3: Time slots
  console.log('\nüìù Test 3: Time Slots');
  try {
    const response3 = await axios.post(baseURL, {
      message: 'I can study at 17:00 on weekdays',
      conversationState: conversationState
    });
    console.log('‚úÖ Response:', response3.data.response);
    conversationState = response3.data.conversationState;
    console.log('üîÑ State:', conversationState);
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    return;
  }

  // Test 4: Language preference
  console.log('\nüìù Test 4: Language Preference');
  try {
    const response4 = await axios.post(baseURL, {
      message: 'I prefer English',
      conversationState: conversationState
    });
    console.log('‚úÖ Response:', response4.data.response);
    conversationState = response4.data.conversationState;
    console.log('üîÑ State:', conversationState);
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    return;
  }

  // Test 5: Hobbies/Preferences
  console.log('\nüìù Test 5: Hobbies/Preferences');
  try {
    const response5 = await axios.post(baseURL, {
      message: 'I like chess and programming',
      conversationState: conversationState
    });
    console.log('‚úÖ Response:', response5.data.response);
    console.log('üéØ Tutors found:', response5.data.tutors?.length || 0);
    
    if (response5.data.tutors) {
      console.log('\nüèÜ Top Tutors:');
      response5.data.tutors.forEach((tutor, index) => {
        console.log(`${index + 1}. ${tutor.name} (${tutor.subject}) - Score: ${tutor.score}`);
        console.log(`   Languages: ${tutor.languagesSpoken.join(', ')}`);
        console.log(`   Available: ${tutor.availableTime.join(', ')}`);
        console.log(`   Hobbies: ${tutor.hobbies.join(', ')}`);
        console.log(`   Matching reasons: ${tutor.matchingReasons.join(', ')}`);
        console.log('');
      });
    }
    
    conversationState = response5.data.conversationState;
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    return;
  }

  console.log('‚úÖ All tests completed successfully!');
}

// Test different scenarios
async function testMultipleScenarios() {
  console.log('üß™ Testing Multiple AI Tutor Scenarios\n');

  const scenarios = [
    {
      name: 'Math Tutor with Chess Hobby',
      messages: [
        'English',
        'I need help with math',
        'I can study at 17:00 on weekdays',
        'I prefer English',
        'I like chess and programming'
      ]
    },
    {
      name: 'Physics Tutor with Russian Language',
      messages: [
        'Russian',
        '–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Ñ–∏–∑–∏–∫–µ',
        '–Ø –º–æ–≥—É –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ 18:00 –ø–æ –±—É–¥–Ω—è–º',
        '–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫',
        '–ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è –∏ —à–∞—Ö–º–∞—Ç—ã'
      ]
    },
    {
      name: 'English Tutor with Business Focus',
      messages: [
        'English',
        'I need help with English',
        'I can study at 15:00 on weekends',
        'I prefer English and French',
        'I like business networking and wine tasting'
      ]
    }
  ];

  for (const scenario of scenarios) {
    console.log(`\nüìã Scenario: ${scenario.name}`);
    console.log('=' .repeat(50));
    
    let conversationState = null;
    
    for (let i = 0; i < scenario.messages.length; i++) {
      const message = scenario.messages[i];
      console.log(`\nüìù Step ${i + 1}: "${message}"`);
      
      try {
        const response = await axios.post('http://localhost:3000/api/ai-tutor', {
          message: message,
          conversationState: conversationState
        });
        
        console.log('‚úÖ Response:', response.data.response);
        conversationState = response.data.conversationState;
        
        if (response.data.tutors) {
          console.log(`üéØ Found ${response.data.tutors.length} tutors:`);
          response.data.tutors.forEach((tutor, index) => {
            console.log(`   ${index + 1}. ${tutor.name} - Score: ${tutor.score}`);
          });
        }
      } catch (error) {
        console.error('‚ùå Error:', error.response?.data || error.message);
        break;
      }
    }
  }
}

// Run tests
async function runTests() {
  try {
    await testAITutorAPI();
    console.log('\n' + '='.repeat(60));
    await testMultipleScenarios();
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

// Check if running directly
if (require.main === module) {
  runTests();
}

module.exports = { testAITutorAPI, testMultipleScenarios }; 